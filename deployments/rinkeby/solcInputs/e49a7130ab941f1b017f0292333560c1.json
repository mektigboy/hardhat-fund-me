{
    "language": "Solidity",
    "sources": {
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n/// @title Funding Contract\n/// @author mektigboy\n/// @notice Create a sample funding contract.\n/// @dev Implements price feeds as our library.\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address public immutable i_owner;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFounded;\n    AggregatorV3Interface private s_priceFeed;\n\n    error NotOwner();\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    constructor(address priceFeed) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeed);\n    }\n\n    /// @notice Funds our contract based on ETH/USD.\n    function fund() public payable {\n        require(msg.value.getConvertionRate(s_priceFeed) >= MINIMUM_USD, \"Did not send enough ETH!\");\n        s_addressToAmountFounded[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFounded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool success,) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConvertionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
